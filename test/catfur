<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>猫爪随机方向动画</title>
<style>
  html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    background: #1a1a1a;
    overflow-x: hidden;
  }
  .bottom-container {
    position: relative;
    width: 100%;
    height: 100%;
  }
  canvas {
    position: absolute;
    left: 0;
    top: 0;
    pointer-events: none;
  }
</style>
</head>
<body>
<div class="bottom-container">
  <canvas id="pawCanvas"></canvas>
</div>

<script>
const canvas = document.getElementById('pawCanvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

window.addEventListener('resize', () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
});

// 猫爪图片
const pawImg = new Image();
pawImg.src = 'data:image/svg+xml;base64,' + btoa(`
<svg viewBox="0 0 1304 1024" xmlns="http://www.w3.org/2000/svg">
<path d="M0 446.49054a171.094255 145.438963 90 1 0 290.877927 0 171.094255 145.438963 90 1 0-290.877927 0Z"/>
<path d="M1126.923945 768.927392a140.307905 171.094255 12.07 1 0 71.553865-334.6237 140.307905 171.094255 12.07 1 0-71.553865 334.6237Z"/>
<path d="M353.069892 190.999222a190.999222 149.508423 90 1 0 299.016847 0 190.999222 149.508423 90 1 0-299.016847 0Z"/>
<path d="M887.858242 431.109679a149.508423 190.999222 6.71 1 0 44.634256-379.38186 149.508423 190.999222 6.71 1 0-44.634256 379.38186Z"/>
<path d="M962.073434 786.025054c-10.704449 162.07067-167.201728 249.033261-352.36216 236.736415s-328.918531-118.899006-318.479481-281.058143 173.305918-264.957235 354.662289-271.415291c187.549028 37.686739 326.883801 153.577883 316.179352 315.737019z"/>
</svg>
`);

// 生成随机直线路径
function generatePath(numPoints) {
  const path = [];
  const startX = Math.random() * canvas.width;
  const startY = Math.random() * canvas.height;
  const endX = Math.random() * canvas.width;
  const endY = Math.random() * canvas.height;

  for (let i = 0; i < numPoints; i++) {
    const t = i / (numPoints - 1);
    path.push({
      x: startX + (endX - startX) * t,
      y: startY + (endY - startY) * t
    });
  }
  return path;
}

// 爪印类
class Paw {
  constructor(pathPoint, angle) {
    this.x = pathPoint.x;
    this.y = pathPoint.y;
    this.angle = angle + 90; // ✅ 初始顺时针旋转90°
    this.life = 200;
  }

  draw(ctx) {
    ctx.save();
    ctx.translate(this.x, this.y);
    ctx.rotate(this.angle * Math.PI / 180);
    ctx.globalAlpha = Math.min(this.life / 200, 1);
    ctx.drawImage(pawImg, -20, -20, 40, 40);
    ctx.restore();
    this.life--;
  }
}

let paws = [];
let path = generatePath(30);
let currentIndex = 0;
let stepInterval = 60;
let frameCount = 0;

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // 每隔 stepInterval 生成新的爪印
  if (currentIndex < path.length && frameCount % stepInterval === 0) {
    const p1 = path[currentIndex];
    const p2 = path[Math.min(currentIndex + 1, path.length - 1)];
    const angle = Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
    paws.push(new Paw(p1, angle));
    currentIndex++;
  }

  // 绘制所有爪印
  for (let i = paws.length - 1; i >= 0; i--) {
    const paw = paws[i];
    paw.draw(ctx);
    if (paw.life <= 0) paws.splice(i, 1);
  }

  frameCount++;
  if (currentIndex >= path.length && paws.length === 0) {
    path = generatePath(30);
    currentIndex = 0;
  }

  requestAnimationFrame(draw);
}

pawImg.onload = () => {
  draw();
};
</script>
</body>
</html>

